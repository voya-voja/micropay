/*
 * FoldingWallet.java
 *
 * Created on July 17, 2001, 10:13 AM
 */

package com.inexum.demo.MicroAc.Wallet;

import com.inexum.IPC.Lock;
import com.inexum.MicroAc.DomainTypes.VoucherInfo;
import com.inexum.MicroAc.Wallet.IWalletListener;
import com.inexum.MicroAc.Wallet.Wallet;
import com.inexum.MicroAc.Wallet.IWallet;
import com.inexum.MicroAc.Wallet.WalletBrowseEvent;
import com.inexum.MicroAc.Wallet.WalletPurchaseEvent;
import com.inexum.MicroAc.Wallet.WalletFailureEvent;
import com.inexum.MicroAc.Wallet.WalletConnectEvent;
import com.inexum.util.ConfigurationManager;

/**
 *
 * @author  rgoold
 * @version 
 */
public class FoldingWallet extends javax.swing.JFrame
    implements IWalletListener
{
    private final ConfigurationManager c_rsrcs = ConfigurationManager.Instance();
    
    private Wallet              m_wallet;
    private VoucherTableModel   m_model;
    private boolean             m_connected = false;
    private boolean             m_expanded = false;
    
    private Lock                m_connectionLock;

    /** Creates new form FoldingWallet */
    public FoldingWallet ()
    {
        System.out.println("Initializing FoldingWallet ...");
        m_wallet = new Wallet();
        m_model = new VoucherTableModel();
        m_wallet.addWalletListener(this);
        m_connectionLock = new Lock();
        initComponents();
        // See comments in LoginDialog.java about the Mandrake 8 problem.
        setResizable(false);
        setCost(0.00);
        setProduct(null);
//        java.awt.Dimension tableDimension
//            = m_voucherTable.getSize();
//        java.awt.Dimension scrollPaneDimension
//            = jScrollPane1.getSize();
//        if (tableDimension.getWidth() < scrollPaneDimension.getWidth())
//        {
//            tableDimension.setSize(scrollPaneDimension.getWidth(),
//                tableDimension.getHeight());
//            m_voucherTable.setSize(tableDimension);
//        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        balanceLabel = new javax.swing.JLabel();
        productLabel = new javax.swing.JLabel();
        m_balanceLabel = new javax.swing.JLabel();
        m_productLabel = new javax.swing.JLabel();
        m_loginButton = new javax.swing.JButton();
        m_expandButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_voucherTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        m_costLabel = new javax.swing.JLabel();
        
        getContentPane().setLayout(null);
        
        setTitle("Wallet");
        setFont(new java.awt.Font("Arial", 0, 10));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        balanceLabel.setText("Balance:");
        balanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        balanceLabel.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(balanceLabel);
        balanceLabel.setBounds(0, 30, 60, 20);
        
        productLabel.setText("Product:");
        productLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        productLabel.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(productLabel);
        productLabel.setBounds(0, 50, 60, 20);
        
        m_balanceLabel.setText("$0.00");
        m_balanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        m_balanceLabel.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(m_balanceLabel);
        m_balanceLabel.setBounds(70, 30, 150, 20);
        
        m_productLabel.setText("Product");
        m_productLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        m_productLabel.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(m_productLabel);
        m_productLabel.setBounds(70, 50, 250, 20);
        
        m_loginButton.setFont(new java.awt.Font("Arial", 0, 11));
        m_loginButton.setText("Login");
        m_loginButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        m_loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_loginButtonActionPerformed(evt);
            }
        });
        
        getContentPane().add(m_loginButton);
        m_loginButton.setBounds(10, 10, 80, 20);
        
        m_expandButton.setFont(new java.awt.Font("Arial", 0, 11));
        m_expandButton.setText("Expand");
        m_expandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_expandButtonActionPerformed(evt);
            }
        });
        
        getContentPane().add(m_expandButton);
        m_expandButton.setBounds(140, 10, 80, 20);
        
        m_voucherTable.setBorder(new javax.swing.border.EtchedBorder());
        m_voucherTable.setModel(m_model);
        m_voucherTable.setDoubleBuffered(true);
        m_voucherTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(m_voucherTable);
        
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 100, 310, 100);
        
        jLabel1.setText("Cost:");
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 70, 50, 20);
        
        m_costLabel.setText("0.00 CAD");
        m_costLabel.setFont(new java.awt.Font("Arial", 0, 11));
        getContentPane().add(m_costLabel);
        m_costLabel.setBounds(70, 70, 150, 20);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(230, 120));
        setLocation((screenSize.width-230)/2,(screenSize.height-120)/2);
    }//GEN-END:initComponents

  private void m_expandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_expandButtonActionPerformed
        if (m_expanded)
        {
            this.setSize(230, 120);
            m_expandButton.setText(c_rsrcs.getString("wallet.Expand"));
            m_expanded = false;
        }
        else
        {
            this.setSize(340, 260);
            m_expandButton.setText(c_rsrcs.getString("wallet.Shrink"));
            m_expanded = true;
        }
        this.validate();
  }//GEN-LAST:event_m_expandButtonActionPerformed

  private void m_loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_loginButtonActionPerformed
        if (m_connected)
        {
            m_loginButton.setEnabled(false);
            Thread closeThread = new Thread()
            {
                public void run()
                {
                    m_connectionLock.acquire(5000L);
                    m_wallet.close();
                    m_connectionLock.release();
                }
            };
            closeThread.start();
            return;
        }
        
        StringBuffer nameBuffer = new StringBuffer();
        StringBuffer passwordBuffer = new StringBuffer();
        LoginDialog loginDialog = new LoginDialog(this, true, nameBuffer,
            passwordBuffer);
        loginDialog.show();
        if (nameBuffer.length() == 0 || passwordBuffer.length() == 0)
        {
            return;
        }
        
        m_loginButton.setEnabled(false);
        
        final String name = nameBuffer.toString();
        final String password = passwordBuffer.toString();
        final IWallet wallet = m_wallet;
        new Thread()
        {
            public void run()
            {
                m_connectionLock.acquire();
                LoginThread openThread = new LoginThread(name, password,
                    wallet);
                openThread.start();
                //m_busySpinner.animate(100L);
                try
                {
                    openThread.join();
                }
                catch (java.lang.InterruptedException e)
                {
                }
                m_connectionLock.release();
                //m_busySpinner.stopAnimation();
            }
        }.start();
  }//GEN-LAST:event_m_loginButtonActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.out.println("By!");
        if (m_connected)
        {
            m_loginButton.doClick();
        }
        
        new Thread()
        {
            public void run()
            {
                m_connectionLock.acquire();
                m_connectionLock.release();
                System.exit(0);
            }
        }.start();
    }//GEN-LAST:event_exitForm

    public void walletEvent (WalletBrowseEvent WBE)
    {
        System.out.println("Wallet Browse Event:");
        setProduct (WBE.getProdDesc());
        setCost (WBE.getCost().getPrice());
    }
    
    private void setProduct (String product)
    {
        System.out.println("Product: '" + product + "'." );
        synchronized(m_productLabel)
        {
            m_productLabel.setText(product);
        }
    }
    
    private void setCost (String cost)
    {
        System.out.println("Cost: '" + cost + "'." );
        if (cost == null)
        {
            setCost(0.00);
            return;
        }
        try
        {
            setBalance(Double.parseDouble(cost));
        }
        catch (java.lang.NumberFormatException e)
        {
            e.printStackTrace();
        }
    }
    
    private void setCost (double cost)
    {
        System.out.println("Cost = '" + cost + "'." );
        java.text.NumberFormat form
            = java.text.NumberFormat.getCurrencyInstance();
        form.setMaximumFractionDigits(2);
        synchronized(m_costLabel)
        {
            m_costLabel.setText(form.format(cost));
        }
    }
    
    private void setBalance (String balance)
    {
        System.out.println("Balance: '" + balance + "'." );
        if (balance == null)
        {
            setBalance(0.00);
            return;
        }
        try
        {
            setBalance(Double.parseDouble(balance));
        }
        catch (java.lang.NumberFormatException e)
        {
            e.printStackTrace();
        }
    }
    
    private void setBalance (double balance)
    {
        System.out.println("Balance = '" + balance + "'." );
        java.text.NumberFormat form
            = java.text.NumberFormat.getCurrencyInstance();
        form.setMaximumFractionDigits(2);
        synchronized(m_balanceLabel)
        {
            m_balanceLabel.setText(form.format(balance));
        }
    }

    public void walletEvent (WalletPurchaseEvent WPE)
    {
        System.out.println("Wallet Purchase Event:");
        VoucherInfo info = WPE.getVoucherInfo();
        if (info != null && !m_model.containsVoucher(info))
        {
            m_model.addVoucher(info);
        }
        setBalance(m_wallet.getBalance());
    }
    
    public void walletEvent (WalletFailureEvent WFE)
    {
        System.out.println("Wallet Failure Event: '" + WFE.getMessage() + "'." );
        javax.swing.JOptionPane.showMessageDialog(this, WFE.getMessage());
    }
    
    public void walletEvent (WalletConnectEvent WCE)
    {
        m_connected = WCE.isConnected();
        if (WCE.isConnected())
        {
            System.out.println("Wallet Connect Event:");
            setBalance(m_wallet.getBalance());
            m_loginButton.setText(c_rsrcs.getString("wallet.Logout"));
            java.util.Collection vouchers = m_wallet.getVouchers();
            if (vouchers == null)
                return;
            java.util.Iterator voucherIterator = vouchers.iterator();
            while (voucherIterator.hasNext())
            {
                try
                {
                    VoucherInfo voucherInfo = (VoucherInfo)voucherIterator.next();
                    m_model.addVoucher(voucherInfo);
                }
                catch (java.lang.ClassCastException e)
                {
                    e.printStackTrace();
                }
            }
        }
        else
        {
            System.out.println("Wallet Disconnect Event:");
            setBalance(0.00);
            m_loginButton.setText(c_rsrcs.getString("wallet.Login"));
            m_model.clear();
        }
        if (!m_loginButton.isEnabled())
        {
            m_loginButton.setEnabled(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JLabel productLabel;
    private javax.swing.JLabel m_balanceLabel;
    private javax.swing.JLabel m_productLabel;
    private javax.swing.JButton m_loginButton;
    private javax.swing.JButton m_expandButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable m_voucherTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel m_costLabel;
    // End of variables declaration//GEN-END:variables

    /**
    * @param args the command line arguments
    */
    public static void main (String args[])
    {
        System.out.println("Wallet starting ...");

        final FoldingWallet wallet = new FoldingWallet();
         
        wallet.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                wallet.exitForm(evt);
            }
        });
        wallet.show();
    }

}

